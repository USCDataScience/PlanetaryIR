
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        is_target.label: Boolean
      }
    

      deepdive.extraction.extractors.ext_target_label {
        cmd: """

	# TODO use temporary table
	deepdive create table "target_label"
	deepdive sql 'INSERT INTO target_label SELECT R0.mention_id AS "target_mention.R0.mention_id", R0.mention_text AS "target_mention.R0.mention_text", 1 AS column_2, '\''from_Chemcam_MER'\'' AS column_3
FROM target_mention R0, targets_chemcam_mer R1
        WHERE lower(R1.target_name) = lower(R0.mention_text)
UNION ALL
SELECT R0.target_id AS "target_label__0.R0.target_id", R0.target_name AS "target_label__0.R0.target_name", R0.label AS "target_label__0.R0.label", R0.rule_id AS "target_label__0.R0.rule_id"
FROM target_label__0 R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "target_label"
        style: "cmd_extractor"
          dependencies: [ "ext_target_mention_by_map_target_mention" ,  "ext_target_label__0_by_supervise" ]
          input_relations: [
            target_mention
            targets_chemcam_mer
            target_label__0
          ]
      }
    

      deepdive.extraction.extractors.ext_target_label_resolved {
        cmd: """

	deepdive create view target_label_resolved as 'SELECT R0.target_id AS column_0, R0.target_name AS column_1, SUM(R0.label) AS column_2
FROM target_label R0
        
        GROUP BY R0.target_id, R0.target_name'
	
        """
          output_relation: "target_label_resolved"
        style: "cmd_extractor"
          dependencies: [ "ext_target_label" ]
          input_relations: [
            target_label
          ]
      }
    

      deepdive.extraction.extractors.ext_is_target {
        cmd: """

	# TODO use temporary table
	deepdive create table "is_target"
	deepdive sql 'INSERT INTO is_target SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, 
CASE WHEN R0.column_2 > 0 THEN true
     WHEN R0.column_2 < 0 THEN false
     ELSE NULL
END AS label
          FROM target_label_resolved R0
        
          
UNION ALL
SELECT DISTINCT R0.mention_id, R0.mention_text, 0 AS id, (NULL :: BOOLEAN) AS label
          FROM target_mention R0
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "is_target"
        style: "cmd_extractor"
          dependencies: [ "ext_target_label_resolved" ,  "ext_target_mention_by_map_target_mention" ]
          input_relations: [
            target_label_resolved
            target_mention
          ]
      }
    

        deepdive.extraction.extractors.ext_sentences_by_nlp_markup {
          input: """ SELECT R0.id AS "articles.R0.id", R0.content AS "articles.R0.content"
FROM articles R0
        
          """
          output_relation: "sentences"
          udf: ${APP_HOME}"/udf/nlp_markup.sh"
          style: "tsv_extractor" 
          
          input_relations: [
            articles
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_target_feature_by_extract_target_features {
          input: """ SELECT R0.mention_id AS "target_mention.R0.mention_id", R0.begin_index AS "target_mention.R0.begin_index", R0.end_index AS "target_mention.R0.end_index", R0.doc_id AS "target_mention.R0.doc_id", R0.sentence_index AS "target_mention.R0.sentence_index", R1.tokens AS "sentences.R1.tokens", R1.lemmas AS "sentences.R1.lemmas", R1.pos_tags AS "sentences.R1.pos_tags", R1.ner_tags AS "sentences.R1.ner_tags", R1.dep_types AS "sentences.R1.dep_types", R1.dep_tokens AS "sentences.R1.dep_tokens"
FROM target_mention R0, sentences R1
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index 
          """
          output_relation: "target_feature"
          udf: ${APP_HOME}"/udf/extract_target_features.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_target_mention_by_map_target_mention" ,  "ext_sentences_by_nlp_markup" ]
          input_relations: [
            target_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_person_mention_by_map_person_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.sentence_text AS "sentences.R0.sentence_text"
FROM sentences R0
        
          """
          output_relation: "person_mention"
          udf: ${APP_HOME}"/udf/map_person_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_nlp_markup" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_target_mention_by_map_target_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.sentence_text AS "sentences.R0.sentence_text", R0.tokens AS "sentences.R0.tokens"
FROM sentences R0
        
          """
          output_relation: "target_mention"
          udf: ${APP_HOME}"/udf/map_target_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_nlp_markup" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_target_label__0_by_supervise {
          input: """ SELECT R0.mention_id AS "target_mention.R0.mention_id", R0.mention_text AS "target_mention.R0.mention_text", R0.begin_index AS "target_mention.R0.begin_index", R0.end_index AS "target_mention.R0.end_index", R0.doc_id AS "target_mention.R0.doc_id", R0.sentence_index AS "target_mention.R0.sentence_index", R1.sentence_text AS "sentences.R1.sentence_text", R1.tokens AS "sentences.R1.tokens", R1.lemmas AS "sentences.R1.lemmas", R1.pos_tags AS "sentences.R1.pos_tags", R1.ner_tags AS "sentences.R1.ner_tags", R1.dep_types AS "sentences.R1.dep_types", R1.dep_tokens AS "sentences.R1.dep_tokens"
FROM target_mention R0, sentences R1
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index 
          """
          output_relation: "target_label__0"
          udf: ${APP_HOME}"/udf/supervise_targets.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_target_mention_by_map_target_mention" ,  "ext_sentences_by_nlp_markup" ]
          input_relations: [
            target_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inf_istrue_is_target {
          input_query: """
          SELECT R0.id AS "is_target.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM is_target R0, target_mention R1, target_feature R2
        WHERE R1.mention_id = R0.target_id  AND R1.mention_text = R0.target_name  AND R2.target_id = R0.target_id """
          function: "Imply(is_target.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_target_mention_by_map_target_mention" ,  "ext_target_feature_by_extract_target_features" ]
          input_relations: [
            is_target
            target_mention
            target_feature
          ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_target_mention_by_map_target_mention
  ext_person_mention_by_map_person_mention
  ext_target_feature_by_extract_target_features
  ext_target_label_resolved
  ext_target_label
  ext_sentences_by_nlp_markup
  ext_is_target
  ext_target_label__0_by_supervise
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_is_target
]
deepdive.pipeline.pipelines.endtoend: [
  ext_target_mention_by_map_target_mention
  ext_person_mention_by_map_person_mention
  ext_target_feature_by_extract_target_features
  ext_target_label_resolved
  ext_target_label
  ext_sentences_by_nlp_markup
  ext_is_target
  ext_target_label__0_by_supervise
  inf_istrue_is_target
]
deepdive.calibration.holdout_fraction:0.25
deepdive.sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence"
deepdive.schema {"relations" : {"sentences" : {"columns" : {"doc_offsets" : {"type" : "int[]", "index" : 7}, "sentence_index" : {"type" : "int", "index" : 1, "annotations" : [{"name" : "key"}]}, "sentence_text" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "searchable"}]}, "doc_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "ner_tags" : {"type" : "text[]", "index" : 6}, "lemmas" : {"type" : "text[]", "index" : 4}, "dep_types" : {"type" : "text[]", "index" : 8}, "tokens" : {"type" : "text[]", "index" : 3}, "pos_tags" : {"type" : "text[]", "index" : 5}, "dep_tokens" : {"type" : "int[]", "index" : 9}}, "annotations" : [{"name" : "source"}]}, "target_feature" : {"columns" : {"target_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "is_target", "column" : "target_id", "alias" : "is_target"}}]}, "feature" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "extraction"}]}, "articles" : {"columns" : {"id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "content" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}}, "annotations" : [{"name" : "source"}]}, "target_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3, "annotations" : [{"name" : "references", "args" : {"relation" : "sentences", "column" : "sentence_index", "alias" : "appears_in"}}]}, "doc_id" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "distributed_by"}, {"name" : "references", "args" : {"relation" : "sentences", "column" : "doc_id", "alias" : "appears_in"}}]}, "mention_text" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "end_index" : {"type" : "int", "index" : 5}, "mention_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "extraction"}]}, "targets_chemcam_mer" : {"columns" : {"target_name" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "source"}]}, "person_mention" : {"columns" : {"mention_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}, "mention_text" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "doc_id" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "distributed_by"}, {"name" : "references", "args" : {"relation" : "sentences", "column" : "doc_id", "alias" : "appears_in"}}]}, "sentence_index" : {"type" : "int", "index" : 3, "annotations" : [{"name" : "references", "args" : {"relation" : "sentences", "column" : "sentence_index", "alias" : "appears_in"}}]}}, "annotations" : [{"name" : "extraction"}]}, "target_label_resolved" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "target_label__0" : {"columns" : {"target_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "is_target", "column" : "target_id", "alias" : "is_target"}}]}, "target_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "label" : {"type" : "int", "index" : 2, "annotations" : [{"name" : "navigable"}]}, "rule_id" : {"type" : "text", "index" : 3, "annotations" : [{"name" : "navigable"}]}}, "annotations" : [{"name" : "extraction"}]}, "is_target" : {"columns" : {"target_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "target_mention", "column" : "mention_id", "alias" : "target_id"}}]}, "target_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "target_mention", "column" : "mention_text", "alias" : "target_name"}}]}}, "annotations" : [{"name" : "extraction"}], "variable_type" : "boolean", "variable_cardinality" : 2}, "target_label" : {"columns" : {"target_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "is_target", "column" : "target_id", "alias" : "is_target"}}]}, "target_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "label" : {"type" : "int", "index" : 2, "annotations" : [{"name" : "navigable"}]}, "rule_id" : {"type" : "text", "index" : 3, "annotations" : [{"name" : "navigable"}]}}, "annotations" : [{"name" : "extraction"}]}}}
